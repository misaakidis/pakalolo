syntax = "proto3";

package claimchain;

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";


message Claim {
  enum ClaimType {
    APPDATA = 0;
    METADATA = 1;
    CROSSREF = 2;
    REVOCATION = 3;
    PRIVATE_CLAIM_COMMITMENT = 4;
  }

  // Claim label name and unique signature
  message Label {
    string name = 1;
    bytes unique_sig = 2;
  }

  ClaimType type = 1;
  google.protobuf.Struct content = 2;
  repeated Label labels = 3;

  // Reference to the public log entry of the previous version
  // of the claim.
  Block.EntryReference prev = 4;
}


message CapabilityList {
  repeated Claim.Label labels = 1;
}


message Block {
  // Reference to a block on the chain.
  message BlockReference {
    uint32 block_index = 1;
    bytes block_digest = 2;
  }

  // Reference to a log entry.
  message EntryReference {
    uint32 block_index = 1;
    uint32 entry_index = 2;
    bytes entry_digest = 3;
  }


  // Entry in the public claim log.
  message LogEntry {
    // List of tree lookup keys on the non-equivocation map for the claim.
    repeated string lookup_keys = 1;
    Claim claim = 2;
  }


  // Wrapper for everything on the block that is signed.
  message BlockPayload {
    uint32 block_index = 1;

    // Log of public claims.
    repeated LogEntry public_log = 2;
    // References to previous blocks.
    repeated BlockReference back_references = 3;
    // Reference to the metadata claim.
    EntryReference metadata = 4;
    google.protobuf.Timestamp timestamp = 5;

    // Hash digest of the non-equivocation map (or hash digest
    // of the Merkle tree root).
    string non_equivocation_map_digest = 6;
    // Hash digest of the soundness proof of the non-equivocation Merkle tree.
    string non_equivocation_ext_proof_digest = 7;

    // Map from claim commitments to digests of claim envelopes
    map<string, string> private_envelopes_map = 8;
    // Map from reader identifiers to digests of encrypted capability lists
    map<string, string> capabilities_map = 9;
  }

  BlockPayload payload = 1;
  bytes sig = 2;
}


// Format for publishing private claim encryptions to multiple readers.
message Envelope {
  // One-time symmetric key sk, encrypted-and-MAC'd for all particular reader.
  // The MAC is common for all readers; it is stored in sk_digest field.
  repeated bytes sk_encryptions = 1;
  bytes sk_digest = 2;

  // Encryption of a PrivateClaimWrapper.
  bytes encrypted_claim_wrapper = 3;

  // Commitment to the claim inside the PrivateClaimWrapper.
  string claim_commitment = 4;
}


// Single private claim along with commitment openings.
message PrivateClaimWrapper {
  Claim claim = 1;
  bytes label_commit_opening_secret = 2;
  bytes claim_commit_opening_secret = 3;
}



